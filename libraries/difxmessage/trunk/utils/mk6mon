#!/usr/bin/env python
# coding: latin-1

#**************************************************************************
#   Copyright (C) 2008-2016 by Helge Rottmann and Walter Brisken          *
#                                                                         *
#   This program is free software; you can redistribute it and/or modify  *
#   it under the terms of the GNU General Public License as published by  *
#   the Free Software Foundation; either version 3 of the License, or     *
#   (at your option) any later version.                                   *
#                                                                         *
#   This program is distributed in the hope that it will be useful,       *
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
#   GNU General Public License for more details.                          *
#                                                                         *
#   You should have received a copy of the GNU General Public License     *
#   along with this program; if not, write to the                         *
#   Free Software Foundation, Inc.,                                       *
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
#**************************************************************************

from string import split, strip, find, upper, lower
from sys import argv, exit
from os import popen, getenv
from glob import glob
import socket
import struct
from xml.parsers import expat
from copy import deepcopy
import curses
import signal
import time

def signal_handler(signal, frame):
	print('You pressed Ctrl+C!')
	raise KeyboardInterrupt

program = 'mk6mon'
author  = 'Helge Rottmann'
version = '0.1'
verdate = '20151111'

def usage(prog):
	print '%s ver. %s  %s  %s\n' % (program, version, author, verdate)
	print 'Usage: %s [options]\n' % prog
	print 'options can include:'
	print '  --help'
	print '  -h        print help information and quit\n'

class Mk6state:

	def __init__(self):
		self.ok    = False
		self.mk6type  = ''
		self.pid   = 0
		self.id    = ''
		self.mk6   = ''
		self.seq   = 0
		self.msn1  = 'none'
		self.msn2  = 'none'
		self.msn3  = 'none'
		self.msn4  = 'none'
		self.disks1 = 0
		self.disks2 = 0
		self.disks3 = 0
		self.disks4 = 0
		self.activeVSN  = 'none'
		self.state = 'Unknown'
		self.scan  = 0
		self.name  = ''
		self.pos   = 0L
		self.rate  = 0.0
		self.date  = 0.0

	def getstring(self):
		if self.ok and self.mk6type == 'status':
			str = '%-12s%8s (%d)      %8s (%d)      %8s (%d)      %8s (%d)      %s' % \
				(self.mk6, self.msn1, self.disks1, self.msn2, self.disks2, self.msn3, self.disks3, self.msn4, self.disks4, \
                                 time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time())))
		elif self.ok and self.mk6type == 'activity':
			if self.state == 'GetDirectory':
				position = '%d - %d%%' % (self.pos / 1000, self.pos % 1000)
				str = '%-12s%8s %14s      %7.2f %14s %17s %12.6f' % \
					(self.mk6, self.activeVSN, self.state, self.rate * 8.0, position, self.name, self.date)
			else:
				str = '%-12s%8s %14s      %7.2f %14d %17s %12.6f' % \
					(self.mk6, self.activeVSN, self.state, self.rate * 8.0, self.pos, self.name, self.date)
		else:
			str = ''
		return str

	def getmk6(self):
		return self.mk6

class Parser:

	def __init__(self):
		self._parser = expat.ParserCreate()
		self._parser.StartElementHandler = self.start
		self._parser.EndElementHandler = self.end
		self._parser.CharacterDataHandler = self.data
		self.tmp = ''
		self.info = Mk6state()

	def feed(self, data):
		try:
			self._parser.Parse(data, 0)
		except expat.ExpatError:
			print '\n\n XXX %s XXX' % data 

	def close(self):
		self._parser.Parse("", 1) # end of data
		del self._parser # get rid of circular references

	def start(self, tag, attrs):
		pass

	def end(self, tag):
		if tag == 'mark6Status':
			self.info.ok = True
			self.info.mk6type = 'status'
		if tag == 'slot1MSN':
			if len(self.tmp) != 8:
				self.info.msn1 = 'none'
			else:
				self.info.msn1 = upper(self.tmp)
		if tag == 'slot2MSN':
			if len(self.tmp) != 8:
				self.info.msn2 = 'none'
			else:
				self.info.msn2 = upper(self.tmp)
		if tag == 'slot3MSN':
			if len(self.tmp) != 8:
				self.info.msn3 = 'none'
			else:
				self.info.msn3 = upper(self.tmp)
		if tag == 'slot4MSN':
			if len(self.tmp) != 8:
				self.info.msn4 = 'none'
			else:
				self.info.msn4 = upper(self.tmp)
		if tag == 'slot1Disks':
			self.info.disks1 = int(self.tmp)
		if tag == 'slot2Disks':
			self.info.disks2 = int(self.tmp)
		if tag == 'slot3Disks':
			self.info.disks3 = int(self.tmp)
		if tag == 'slot4Disks':
			self.info.disks4 = int(self.tmp)
		if tag == 'from':
			self.info.mk6 = lower(self.tmp)
		if tag == 'mark6Activity':
			self.info.ok = True
			self.info.mk6type = 'activity'
		if tag == 'activeVSN':
			if len(self.tmp) != 8:
				self.info.activeVSN = 'none'
			else:
				self.info.activeVSN = upper(self.tmp)
		if tag == 'from':
			self.info.mk6 = lower(self.tmp)
		if tag == 'state':
			self.info.state = self.tmp
		if tag == 'playRate':
			self.info.rate = float(self.tmp)
		if tag == 'dataMJD':
			self.info.date = float(self.tmp)
		if tag == 'position':
			self.info.pos = int(self.tmp)
		if tag == 'scanNumber':
			self.info.scan = int(self.tmp)
		if tag == 'scanName':
			self.info.name = self.tmp

	def data(self, data):
		self.tmp = data

	def getinfo(self):
		return self.info.getmk6(), self.info, self.info.getstring()

class Display:

	def __init__(self):
		self.info = {}
		self.infoActivity = {}
		self.rows = {}
		self.rowsActivity = {}
		self.curs = curses.initscr()
		#curses.start_color()
		#curses.init_pair(1, curses.COLOR_RED,curses.COLOR_WHITE)
		curses.noecho()
		curses.cbreak()
		self.curs.keypad(1)
		self.curs.refresh()

	def close(self):
		curses.nocbreak()
		self.curs.keypad(0)
		curses.echo()
		curses.endwin()

	def displayrow(self, info, row):
		#self.curs.addstr(row, 0, info, curses.color_pair(1))
		self.curs.addstr(row + 2, 0, info)
		self.curs.refresh()

	def displayrowActivity(self, info, row, lenstatrows):
		#self.curs.addstr(row, 0, info, curses.color_pair(1))
		#self.curs.addstr(row + lenstatrows + 5, 0, info[0] + ' ' + str(info[1]))
		self.curs.addstr(row + lenstatrows + 5, 0, info[0])
		self.curs.refresh()

	def displayall(self, lenstatrows):
		self.curs.clear()
                self.curs.addstr(0, 0, "Mark6 Module Location")
                self.curs.addstr(1, 0, "Machine     Slot 1 (# disks)  Slot 2 (# disks)  Slot 3 (# disks)  Slot 4 (# disks)  Status Time")
		keys = self.rows.keys()
		for k in keys:
			self.curs.addstr(self.rows[k] + 2, 0, self.info[k])

                self.curs.addstr(lenstatrows + 3, 0, "Mark6 Unit Activity")
                self.curs.addstr(lenstatrows + 4, 0, "Machine          VSN          State    Data Rate       Position         Scan Name     Data MJD")
		keys = self.rowsActivity.keys()
		for k in keys:
			#self.curs.addstr(lenstatrows + 5 + self.rowsActivity[k], 0, self.infoActivity[k][0] + ' ' + str(self.infoActivity[k][1]))
			self.curs.addstr(lenstatrows + 5 + self.rowsActivity[k], 0, self.infoActivity[k][0])

		self.curs.refresh()

	def newdata(self, data):
		k = data[0]
		j = data[1].activeVSN
		lenstatrows = len(self.rows)
		if data[1].mk6type == 'status' and self.rows.has_key(k):
			self.info[k] = data[2]
			self.displayrow(self.info[k], self.rows[k])
		elif data[1].mk6type == 'activity' and self.rowsActivity.has_key((k,j)):
			self.infoActivity[(k,j)] = [data[2], time.time()]
			self.displayrowActivity(self.infoActivity[(k,j)], self.rowsActivity[(k,j)], lenstatrows)
		elif data[1].mk6type == 'status':
			self.rows[k] = 0
			self.info[k] = data[2]
			keys = self.rows.keys()
			keys.sort()
			i = 0
			for k in keys:
				self.rows[k] = i
				i += 1
			self.displayall(len(self.rows))
		elif data[1].mk6type == 'activity':
			self.rowsActivity[(k,j)] = 0
			self.infoActivity[(k,j)] = [data[2], time.time()]
			keys = self.rowsActivity.keys()
			keys.sort()
			i = 0
			for k in keys:
				self.rowsActivity[k] = i
				i += 1
			self.displayall(lenstatrows)
		# delete activity rows 30 seconds old
		ikeys = self.infoActivity.keys()
		rowsdeleted = False
		for key in ikeys:
			expired = False
			if self.infoActivity[key][1] + 30 < time.time():
				expired = True
				rowsdeleted = True
				del self.infoActivity[key]
				del self.rowsActivity[key]
		if rowsdeleted == True:
			keys = self.rowsActivity.keys()
			keys.sort()
			i = 0
			for k in keys:
				self.rowsActivity[k] = i
				i += 1
			self.displayall(lenstatrows)


def listen(port, group):
	dt = 0.0
	t = 0
	maxtime = 6000

	# Now listen for responses, until either time runs out or we get all we need
	s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	s.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 768000)
	s.bind(('', port))
	mreq = struct.pack("4sl", socket.inet_aton(group), socket.INADDR_ANY)
	s.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
	s.settimeout(0.2)
	d = Display()
	try:
		while t < maxtime:
			try:
				message = s.recv(1500)
			except socket.timeout:
				t += dt
				continue

			if message[0] != '<':
				continue
			p = Parser()
			p.feed(message)
			machine, mk6type, str = p.getinfo()
			p.close()
			if len(str) < 10:
				continue
			d.newdata([machine, mk6type, str])
	except KeyboardInterrupt:
		d.close()
		return 0
	except:
		d.close()
		return 1
	d.close()
	return 0

# main execution

signal.signal(signal.SIGINT, signal_handler)

if len(argv) >= 2:
	if len(argv) == 2 and argv[1] in ['-h', '--help']:
		usage(argv[0])
		exit(0)
	else:
		print 'Command line error.  Run with -h for help.\n'
		exit(1)


port = getenv('DIFX_MESSAGE_PORT')
if port == None:
	print 'DIFX_MESSAGE_PORT needs to be defined'
	exit(0)
else:
	port = int(port)
group = getenv('DIFX_MESSAGE_GROUP')
if group == None:
	print 'DIFX_MESSAGE_GROUP needs to be defined'
	exit(0)

while(listen(port, group)):
	pass

