Documentation for the UTIL library
----------------------------------

Documentor:  CJL 23 October 1992
	     Revised March 29 1995

This library contains a wide variety of generally useful routines.
To date, every single HOPS program uses at least one routine from
this library.  Below is a calling sequence and brief description of
the library routines.  In most cases, more information is 
available in the source code files.

int				File: $UTIL/account.c
account (segment_name)			Supports the gathering and
char *segment_name;			display of timing information
					during program execution.  It
					is effectively a simple, platform
					independent profiler.  See the
					source file for extensive
					details.
					Return: 0=good, else bad

#include "account.h"			|
int					| Support routine for account().
report_times (t_acc, nseg, buf, 	| Should not be of interest
		real, time_unit)	| to application programmers.
struct time_account *t_acc;		|
int nseg, real;				|
struct tms *buf;			|
double time_unit;			|

#include "fstruct.h"
int				File: $UTIL/check_name.c
check_name (name, f_info)		Makes sure a unix filename
char *name;				complies with proper naming
fstruct *f_info;			conventions.  To understand this
					check $INC/fstruct.h, and the
					source code file.  Part of the 
					get_filelist package (see below)
					Return: 0=good, else bad

int				File: $UTIL/confirm.c
confirm (string)			Prompts user for yes or no,
char *string;				and returns true or false.  If
					the value of "string" is "ON"
					or "OFF", confirmation is
					enabled/disabled (default is
					enabled).

void				File: $UTIL/environment.c
environment()				Sets up several external strings
					and initializes them with the
					values of key environment
					variables.  Makes sensible
					defaults.  Used to make all
					programs respond similarly to
					key environment variables.

#include "fstruct.h"
int				File: $UTIL/get_filelist.c
get_filelist (argc, argv, type, files)	Generates a list of correlator
int argc;				files from a flexible specification
char **argv;				given on the command line (argc,argv).
char type;				The type argument specifies what
fstruct **files;			type of binary file to look for.
					The list goes into an fstruct array,
					ready for convenient use by the 
					programmer.  Incorporates
					recursive directory search.
					Return: 0=good, else bad

int					| Collection of support routines
check_name (name, f_info)		| for get_filelist() above.  Some
char *name;				| of these may be of interest to the
fstruct *f_info;			| application programmer.  Refer to
					| the source file for details.  In
void					| all cases, the source filename
clear_fstruct (f_info)			| is $UTIL/"routine name".c
fstruct *f_info;			|
					|
int					|
extract_filenames (directory, type, 	|
	files, nalloc, filenum, depth)	|
char *directory;			|
char type;				|
fstruct **files;			|
int *nalloc, *filenum, *depth;		|
					|
int					|
root_belong (rootname, dataname)	|
char *rootname, *dataname;		|
					|
int					|
sort_names (files, nfiles)		|
fstruct *files;				|
int nfiles;				|

int				File: $UTIL/time_to_int.c
time_to_int (year, day, 		Converts a time into the number
	hour, min, sec)			of seconds since 0UT, Jan 1 1980,
int year, day, hour, min, sec;		and returns result.

void				File: $UTIL/int_to_time.c
int_to_time (time, year, 		Converts an integer generated by
	day, hour, min, sec)		time_to_int() to a time.
int time, *year, *day, 
	*hour, *min, *sec;

int				File: $UTIL/minmax.c
imin (i, j)			|
int i, j;			| A collection of comparison and
				| windowing routines, currently
int				| extensively used in fourfit.  See
imax (i, j)			| source file for details.
int i, j;			|
				|
int				|
iwin (value, lower, upper)	|
int value, lower, upper;	|
				|
double				|
dmin (a, b)			|
double a, b;			|
				|
double				|
dmax (a, b)			|
double a, b;			|
				|
double				|
dwin (value, lower, upper)	|
double value, lower, upper;	|

void				File: $UTIL/msg.c
msg (string, level, va_alist)		Performs printf-style formatting
char *string;				preceded by the program name
int level;				and controlled by message
va_dcl					importance level.  The argument
					list is identical to printf(),
					except for the level argument.
					The extern string progname must
					be defined.

char*				File: $UTIL/root_id.c
root_id(year, day, hour, min, sec)	Returns the 6-character lower
int year, day, hour, min, sec;		case root id corresponding to
					the supplied root creation time

void				File: $UTIL/syntax.c
syntax()				Prints information about the
					command-line syntax of the current
					program on the screen.  It gets
					this information from the .doc file
					for the program, unifying the 
					documentation.  The "progname"
					extern must be defined.

#include "general.h"		| Conversion routines between corel and
date_to_datef (input, output)	| frnge date formats in memory structures
struct date *input;		| read in from binary correlator files.
struct datef *output;		|
				|
datef_to_date (input, output)	|
struct datef *input;		|
struct date *output;		|
				|
short				|
day_of_datef( date )		|
struct datef date;		|

int				File: $UTIL/hptoie.c
hptoie (input, output, type)		Converts "input" from HP floating
int *input, *output, type;		point format to IEEE format, placing
					the result in "output" (which may
					be the same memory location as the
					input).  The "type" input is 1 for
					single-precision, 2 for double
					precision.
					Return: 0=good, else bad

int				| Support routines for hptoie().  See
hptoie4 (finput, foutput)	| source code for details.
float *finput, *foutput;	|
				|
int				|
hptoie8 (dinput, doutput)	|
double *dinput, *doutput;	|
