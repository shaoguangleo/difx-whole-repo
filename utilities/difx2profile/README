svn co []
aclocal
autoconf
autoheader
automake -a
./configure --prefix=${DIFXROOT} CXX=${MPICXX}
make
# (su root?)
make install

This is brief and probably incomplete description of how to generate pulsar binconfig files for DiFX from the baseband data used for the correlation (ie most use when you are unsure of the absolute phase of the pulsar).

You will first want to compile difx2profile as above.

difx2profile acts on the DIFX format output data from mpifxcorr.  So you create and run a normal mpifxcorr job first, where NUM BASELINES = NUM DATASTREAMS and each baseline is actually an autocorrelation.  At this stage you will need to hand-fiddle the .input file, tools will be put into vex2difx shortly.

Note that if your DAS/digital backend servos the antenna gain on a timescale shorter or comparable to the pulse period, you will get a very odd looking pulse profile out.  You have been warned.

It is important that there is just one entry in the config table, and that is for the pulsar.  Otherwise you'll be binning and adding your reference sources etc as well.  Pulsar binning must be ON! difx2profile will fail with an error if these conditions are not met.

Make sure that the binconfig file which is pointed at by this configuration has the number of pulsar bins that you would like your profile to have.  30 or 40 is a good number for a weakish pulsar, you can have more for a bright pulsar if you want a really nice profile.

If you want, you can shorten the time interval if the pulsar is bright (to save execution time).

So, you run mpifxcorr like normal.  Then run difx2profile, giving it exactly the same .input file that you just gave to mpifxcorr, eg:

difx2profile myexperiment.input

That will produce an ascii pulse profile, in a simple format similar to that you get from the single dish pulsar guys.  it will look like:

Bin#  Weight
0 0.1
1 0.15
2 0.04
...
N 0.1

where N is the number of pulsar bins, minus 1.

Right, so now you have an ascii pulse profile, where the phase is matched to the polycos you fed it (and will feed the correlator).  Now, you could just look at this and set bin phases by eye, and edit that binconfig file you just used for pulseprofile by hand to match what you want for mpifxcorr.  Alternatively, a tool exists (profile2binconfig.py) which will turn that ascii file into an optimum representation of the pulse for a given number of bins.  This is mostly useful if you want to scrunch on a slightly complicated pulse profile.  You run profile2binconfig.py with:

profile2binconfig.py --profile=<ascii profile filename> --polyco=<comma separated polycos> --numbins=<number of bins> --binconfigfile=<outputfilename> [--scrunch] [--nonormalise]

--nonormalise should be always be used for profiles generated by difx2profile (normalisation is used to set the zero-phase of the profile based on the zero-crossing of the first fourier component, whereas we already know what we want the zero-phase to be.  You only want to normalise if some single-dish expert gave you a pulse profile, and you got to skip all the difx2profile stuff)

That will generate the binconfigfile you request, with the number of bins you request, and will produce a nice plot of what its done in the file "pulsarfilter.png".  Like I said, its mostly useful for scrunching.

Enjoy!

