Documentation for the program "adump"
-------------------------------------

COMMAND NAME:   adump

SYNOPSIS:  Reads type-2 A-file lines and writes out selected fields

SYNTAX:  adump [-f type] [-h] [-i inputfile] [-o outputfile] [-t type]
		field1 field2 ... fieldn
		The -i and -o flags are optional, and default to
		stdin and stdout respectively.  The -f flag generates a
		list of supported fields for type 2 and type 3 A-file
		data, depending on "type".  The -t flag causes adump to 
		treat the input data as "type" 2 or 3 data.  The -h flag
		suppresses the header lines in the output.  All flags
		must precede the field specifications.

OPTION FLAGS:	-f type
			Adump supports type-2 (baseline) and type-3
			(closure triangle) A-file records.  The -f flag
			causes a list of available fields for the
			specified type to be printed on stdout.  This
			option is informational only.

		-h
			By default, adump writes a few lines of header
			information, each preceded by a "*".  These lines
			include a date stamp and a list of the fields
			present in the file.  The -h flag suppresses this
			header information, resulting in nothing but data.

		-i inputfile
			If specified, this flag tells adump to read A-file
			data from "inputfile".  If omitted, adump will
			read from stdin (and can thus be used with pipes).

		-o outputfile
			If specified, this flag tells adump to write the
			stripped-down output lines to "outputfile".
			If omitted, adump will write to stdout (and again,
			can be used with pipes and io-redirection).

		-t type
			By default, adump will assume that the input data
			are of the same type (2 or 3) as the first record
			encountered.  It will ignore all input records
			which are not of this type.  The -t flag allows
			the user to override the use of the first record
			to determine the type.  All records which do not
			match "type" are ignored.

ARGUMENTS:	field1 field2 ... fieldn
			These are the A-file format fields that adump will
			send to the output.  A list of valid fields is
			generated by using the -f flag.  All specified 
			fields must be valid.  The program supports full 
			minimum-match for field names.

ENVIRONMENT:	None.


DESCRIPTION:

Adump is a low-level tool to allow relatively painless access to arbitrary
fields in A-files.  Such access may be needed, for example, to prepare data
for an external plotting program, and adump will probably be used most
often in shell scripts.  One specifies the desired fields on the command
line, and adump writes only those fields, formatted exactly as in the 
A-file format, to the output.  The order of the lines is unchanged, and
there are no filtering options.  You should manipulate your A-file to the
desired state before you invoke adump, since HOPS cannot manipulate the
output of adump.  Currently, adump deals only with type-2 (fringe) lines,
and type-3 (closure triangle) lines.  It can deal with only one type per
execution.

Because adump first parses the entire A-file line and then reformats the 
data for output, it is simple to perform computations on the data and 
create new, custom fields.  This has already been done for a few fields 
(e.g. times reformatted as decimal days instead of yyddd-hhmmss strings).  
The architecture of the program is fully extensible in this sense.

For simple field extraction, adump may be compared in functionality to awk, 
and is preferable to awk in HOPS shell scripts for three reasons.  First, 
it knows about and cleanly handles all past and future A-file formats, 
allowing scripts to participate fully in the AFIO library data abstraction 
(see general HOPS documentation for a discussion of this principle).  Second, 
it is convenient and appropriate to insert VLBI-specific calculations into
adump to create new and useful fields in adump output.  Finally, adump
fields are specified via mnemonic and format-independent names instead 
of cryptic and format-specific field numbers, making for scripts which 
are easier to read, understand and maintain.

Because it parses A-file lines and then reformats fields, adump may be
slightly slower than awk, but in practise executions times will probably
be dominated by disk IO and will be comparable between the two programs.

Below is a list of fields which may currently be specified.  The most
up-to-date list can be obtained by using adump with the -f flag.

Standard type-2 (baseline) A-file fields (see aformat.doc)
----------------------------------------------------------
NAME		COMMENTS
----		--------
rootcode
type
extent
duration	version > 2 only
length
offset		version > 2 only
experiment
procdate
scanyear
scantime
source
baseline	separated from quality
quality		separated from baseline
freq_code	separated from mode, nfreq
mode		separated from freq_code, nfreq
nfreq		separated from freq_code, mode
amplitude
snr
phase
datatype
sbdelay
mbdelay
ambiguity
drate
ref_elevation
rem_elevation
ref_azimuth
rem_azimuth
u
v
esdesp
epoch
ref_frequency
total_phase
total_drate
total_mbdelay
total_mbdsbd
parents

Fields derived from A-file data
-------------------------------
procday		Decimal days since Jan 1 1980 0h UT
scanday		Decimal days since Jan 1 1980 0h UT



Standard type-3 (triangle) A-file fields (see aformat.doc)
----------------------------------------------------------
NAME		COMMENTS
----		--------
experiment
type
scanyear
scantime
source
freq_code	separated from mode
mode		separated from freq_code
triangle
roots
extents
lengths
duration	version > 2 only
offset		version > 2 only
scan_quality
data_quality
esdesp
bis_amp
bis_snr
bis_phase
datatype
csbdelay
cmbdelay
ambiguity
cdrate
elevations
azimuths
epoch
ref_frequency

Fields derived from A-file data
-------------------------------
scanday		Decimal days since Jan 1 1980 0h UT
epochday	Decimal days since Jan 1 1980 0h UT
