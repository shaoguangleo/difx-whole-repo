#!/bin/bash
#
# Script to generate an ANTAB plot with gnuplot.
#
# set defaults
[ -z "$decimation" ] && decimation=20
[ -z "$plotrange"  ] && plotrange='[][0:10]'
# help human
USAGE="$0 band pcal prod [true|false] [polconvert ANTAB files]

generates a comparison plot of ANTAB data provided by the QA2 package
with that generated by the individual polconvert tasks.  The default
operation is to make a plot \$label-\$pcal-antab.pdf from what is found in
the current directory.  The arguments are:
    band    lo|hi|b1|b2|b3|b4
    pcal    QA2 tarball product label
    prod    production label
The true|false argument (if true) will retain plotting artifacts in the
current directory in case you want to mess with the plot.  The remaining
arguments may be a list of generated ANTAB files to use.  The default if
none are listed is to find all such files in the current directory.

A number of environment variables are available to modify the plot if
you need make some adjustments for understanding the plot or producing
different versions (default values are given):
    decimation=$decimation      use one value in this many
    plotrange=$plotrange        Hours and Tsys for gnuplot
"
# parse arguments
band=${1-'noband'}
pcal=${2-'nopcal'}
prod=${3-'noprod'}
save=${4-'false'}
[ $# -ge 3 ] || { echo "$USAGE" ; exit 1 ; }
[ "$save" = true ] && shift 4 || {
    save=false && shift 3
}
tag="$prod-$pcal-antab"

# find the QA2 artifact -- i.e. mapping of BB_? names to EHT names
case $band in
b1) bb='BB_1' ;;
b2) bb='BB_2' ;;
lo|b3) bb='BB_3' ;;
hi|b4) bb='BB_4' ;;
esac
qart="${pcal}.APP.artifacts/${pcal}_${bb}_QA2.ANTAB"
[ -f $qart ] || { echo QA2 antab $qart not found ; exit 2 ; }

# note the dpfu used in production and that used in QA2
[ -z "$dpfu" ] && dpfu='0.000'
eval `awk 'NR==1{print $4;exit}' $qart`  # defines DPFU

# find the polconvert products
[ $# -gt 0 ] || set -- `ls *.polconvert-*/*ANTAB`
[ $# -gt 0 ] || { echo no ANTAB files found to process ; exit 3 ; }

# use awk for processing of the antab files
awks='
decimate && NR>6 && (NR)%'$decimation' != 0 {next;}
NR < 4 {next;}
NR==5 {NC=NF-1;NL=int(NC/2)+3;next;}
NR>6 && substr($2,2,1) ~/:/ {dy=$1;hr=substr($2,1,1);mn=substr($2,3,8);}
NR>6 && substr($2,3,1) ~/:/ {dy=$1;hr=substr($2,1,2);mn=substr($2,4,8);}
NR>6 && NF==3 {loc=$3;hic=$3}
NR>6 && NF>3 {loc=0.0;nlo=0; for(c=3; c<NL;c++){loc+=$c;nlo++;} loc = loc/nlo;}
NR>6 && NF>3 {hic=0.0;nhi=0; for(c=NL;c<NF;c++){hic+=$c;nhi++;} hic = hic/nhi;}
NR>6 && dy > 365 {dy=dy - 365;}
NR>6 {printf("%.8f  %.4f %.4f\n", (dy+hr/24.0+mn/1440.0),loc, hic);}
'

# build a data file; the first file being the QA2 estimate (color 0)
# and the rest are polconvert tables; in the process gather info for
# the titles and colors 
declare -a tit
awk -v decimate=0 "$awks" $qart > $tag.out
ndx=0
tit[0]="tit 'QA2 $band = $bb'"
for p
do
    ( echo '' ; echo '' ) >> $tag.out
    awk -v decimate=1 "$awks" $p >> $tag.out
    ndx=$(($ndx + 1))
    map=`ls *jobs-map.txt`
    [ -f "$map" ] && {
        job=`echo $p | cut -d_ -f2 | cut -d. -f1`
        tit[$ndx]="tit '"`awk '$1 == '$job' {print $3}' $map`"($job)'"
    } || {
        tit[$ndx]="tit 'pc $ndx'"
    }
done
[ -s $tag.out ] || { echo problem awking data ; exit 4; }

last=`tail -1 $tag.out | cut -d. -f1`
t=`echo $last \* 24 | bc -lq`

# header
max=$(($ndx + 1))
sed 's/^....//' > $tag.gnu <<EOF
    set term pdfcairo enhanced size 10.56,8.16 font 'sans,12'
    set output '$tag.pdf'
    set key below box title \\
    'Targets(Job) by VLBIScan (<upper> and <lower> chans plotted)'
    set title '{/sans:Bold=20 $tag [DPFU=$DPFU (in QA2) $dpfu (in PC)]}'
    set ylabel 'T_{sys}' font 'sans:Bold,20'
    set xlabel 'Hours (0hr of day $last)' font 'sans:Bold,20'
    set palette rgbformulae 3,11,6
    unset colorbox
    set style line $max linetype 1 lc palette frac 1.0 ps 0.8 pt 2
EOF
# colors
idx=1
while [ $ndx -ge $idx ]
do
    sed 's/^........//' >> $tag.gnu <<....EOF
        cfr=(0.6 * $idx.0 / $max.0)
        set style line $idx linetype 1 lc palette frac cfr ps 0.4 pt 7
....EOF
    idx=$(($idx + 1))
done
# plot
starter="plot $plotrange '$tag.out'"
idx=1
while [ $ndx -ge $idx ]
do
    sed 's/^........//' >> $tag.gnu <<....EOF
        $starter in $idx u (\$1*24.0-$t):2 ${tit[$idx]} w p ls $idx, \\
            '' in $idx u (\$1*24.0-$t):3 notit w p ls $idx, \\
....EOF
    idx=$(($idx + 1))
    starter="    ''"
done
# coda
sed 's/^....//' >> $tag.gnu <<EOF
        '' in 0 u (\$1*24.0-$t):2 ${tit[0]} w p ls $max
    set output
EOF

# make the plot
gnuplot $tag.gnu

$save || { rm -f $tag.gnu $tag.out; }

#
# eof
#
